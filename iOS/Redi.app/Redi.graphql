query Books($allTitles: Boolean = true, $date: DateTime, $id: ID) {
  sync(allTitles: $allTitles, date: $date, id: $id) {
    published
    id
    contentId
    headline
    copyright
    keywords
    coverImage {
      ...RediFile
    }
    disciplines {
      published
      id
      contentId
      name
      coverImage {
        ...RediFile
      }
    }
    author {
      ...RediAuthor
    }
    media {
      published
      media {
        published
        files {
          ...RediFile
        }
      }
    }
    chapters {
      published
      id
      contentId
      displayCards {
        published
        id
        contentId
      }
    }
  }
}

query Chapters($allTitles: Boolean = true, $date: DateTime, $id: ID, $contentId: String) {
  sync(allTitles: $allTitles, date: $date, id: $id, contentId: $contentId) {
    chapters {
      published
      id
      contentId
      headline
      descriptionString
      media {
        published
        media {
          published
          files {
            ...RediFile
          }
        }
      }
      displayCards {
        published
        type
        id
        contentId
        headline
        group
        ...RediOverviewCollection
        ...RediSummarySections
        ...RediQuestions
        author {
          ...RediAuthor
        }
      }
    }
  }
}

query RediEvents($date: DateTime) {
  events(date: $date) {
    ...RediEvent
  }
}

query Logout {
  logout
}

query TriggerOTPEmail($email: String!) {
  triggerOTPEmail(email: $email)
}

query GetUserTokenFromOTPInfo($otp: String!, $accessToken: String!) {
  getUserTokenFromOTPInfo(otp: $otp, accessToken: $accessToken)
}

query SearchSchools($input: SearchSchoolsInput!) {
  searchSchools(input: $input)
}

query User($xid: String) {
  user(xid: $xid){
    xid
    externalId
    userName
    email
    userType
    status
    givenName
    familyName
    fullName
    clientId
    affiliations
    createdAt
    updatedAt
    profilePictureUrl
    defaultRole
  }
}

query SendEmailVerificationCode($email: String!) {
  triggerEmailVerification(email: $email)
}

query VerifyEmail($otp: String!, $accessToken: String!) {
  verifyEmail(otp: $otp, accessToken: $accessToken)
}

mutation CreateRediEvent($input: RediEventInput!) {
  createRediEvent(input: $input) {
    ...RediEvent
  }
}

mutation DeleteRediEvent($id: ID!) {
  deleteRediEvent(id: $id) {
    ...RediEvent
  }
}

mutation SetUserState($state: JSON) {
  setUserState(state: $state)
}

mutation GetUserState {
  setUserState
}

mutation CreateUser($user: CreateUserInput!) {
  createUser(user: $user)
}

mutation UpdateUser($user: UpdateUserInput!) {
  updateUser(user: $user)
}

mutation DeleteUser {
  deleteUser
}

mutation DeleteTitleProgress($titleContentId: String!) {
  deleteUserTitleProgress(titleContentId: $titleContentId)
}

fragment RediEvent on RediEvent {
  id
  createdAt
  updatedAt
  titleContentId
  chapterContentId
  chapterSectionContentId
  displayCardContentId
  learningObjectiveContentId
  questionContentId
  mediaCollectionContentId
  rediMediaContentId
  choiceContentId
  meta
  correct
  userId
}

fragment RediAuthor on Author {
  id
  contentId
  first
  middle
  last
}

fragment RediSummarySections on DisplayCard {
  chapterSections {
    published
    id
    contentId
    headline
    media {
      published
      id
      contentId
      headline
      media {
        ...RediSummaryMedia
      }
    }
  }
}

fragment RediOverviewCollection on DisplayCard {
  media {
    published
    id
    contentId
    headline
    author {
      ...RediAuthor
    }
    media {
      ...RediOverviewMedia
    }
  }
}

fragment RediSummaryCollection on DisplayCard {
  media {
    published
    id
    contentId
    headline
    author {
      ...RediAuthor
    }
    media {
      ...RediSummaryMedia
    }
  }
}

fragment RediQuestions on DisplayCard {
  questions {
    published
    id
    contentId
    headline
    descriptionString
    type
    maxChoices
    choice {
      ...RediQuizChoice
    }
    answer {
      ...RediQuizChoice
    }
    objectives {
      ...RediLearningObjective
    }
    media {
      published
      media {
        ...RediQuestionMedia
      }
    }
  }
}

fragment RediQuizChoice on Choice {
  published
  id
  contentId
  headline
  content
  reason
  headerImage {
    ...RediFile
  }
}

fragment RediLearningObjective on LearningObjective {
  published
  id
  contentId
  headline
  descriptionString
  isRequired
}

fragment RediOverviewMedia on RediMedia {
  published
  id
  contentId
  contentType
  headline
  descriptionString
  author {
    ...RediAuthor
  }
  files {
    ...RediFile
    captionsFile {
      ...RediFile
    }
  }
}

fragment RediSummaryMedia on RediMedia {
  published
  id
  contentId
  contentType
  headline
  descriptionString
  lottieJson {
    ...RediFile
  }
  files {
    ...RediFile
  }
}

fragment RediQuestionMedia on RediMedia {
  published
  id
  contentId
  contentType
  headline
  descriptionString
  files {
    ...RediFile
  }
  lottieJson {
    ...RediFile
  }
}

fragment RediFile on File {
  id
  contentId
  headline
  fileData
  signedURL
  signedThumbURL
  duration
}
